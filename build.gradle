allprojects {
	apply plugin: 'java'
	sourceCompatibility = 1.6
	targetCompatibility = 1.6
}

evaluationDependsOn(':version')

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

group = "com.headlamp-games.cloudmaster" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "CloudMaster_" + mcversion

minecraft {
    version = project.mcversion + "-" + project.forgeversion
    runDir = "run"
    mappings = project.mappingsversion
    
    replace '@VERSION@', project.version
}

processResources
{
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task devJar ( type: Jar, dependsOn: 'classes' ) {
	from sourceSets.main.output
	classifier = 'dev'
}

class JarSigner extends net.minecraftforge.gradle.tasks.SignJar {
    public JarSigner () {
		onlyIf {
			project.hasProperty('signingStorepass')
		}

		alias = 'CovertJaguar'
		storePass = project.signingStorepass
		keyPass = project.signingStorepass
		keyStore = System.getProperty("user.home") + '/.keystore'
	}
}

task signMainJar(type: JarSigner, dependsOn: 'jar') {
	inputFile = jar.getArchivePath()
	outputFile = jar.getArchivePath()
}

task signDevJar(type: JarSigner, dependsOn: 'devJar') {
	inputFile = devJar.getArchivePath()
	outputFile = devJar.getArchivePath()
}

uploadArchives.dependsOn signMainJar, signDevJar
build.dependsOn signMainJar, signDevJar

task releaseInit << {    
    println '*************************************************************'
    println 'This build will be version: ' +  project.version
    println '*************************************************************'
}

task release << {
}

release.dependsOn releaseInit, build
build.shouldRunAfter releaseInit